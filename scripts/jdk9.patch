diff -r 1b1226687b89 common/autoconf/flags.m4
--- a/common/autoconf/flags.m4	Wed Feb 14 06:54:58 2018 -0800
+++ b/common/autoconf/flags.m4	Wed Mar 28 03:03:31 2018 +0200
@@ -30,7 +30,7 @@
 AC_DEFUN([FLAGS_SETUP_ABI_PROFILE],
 [
   AC_ARG_WITH(abi-profile, [AS_HELP_STRING([--with-abi-profile],
-      [specify ABI profile for ARM builds (arm-vfp-sflt,arm-vfp-hflt,arm-sflt, armv5-vfp-sflt,armv6-vfp-hflt,arm64,aarch64) @<:@toolchain dependent@:>@ ])])
+      [specify ABI profile for ARM builds (arm-vfp-sflt,arm-vfp-hflt,arm-sflt,arm-ev3,armv5-vfp-sflt,armv6-vfp-hflt,arm64,aarch64) @<:@toolchain dependent@:>@ ])])
 
   if test "x$with_abi_profile" != x; then
     if test "x$OPENJDK_TARGET_CPU" != xarm && \
@@ -51,6 +51,9 @@
     elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-sflt; then
       ARM_FLOAT_TYPE=sflt
       ARM_ARCH_TYPE_FLAGS='-march=armv5t -marm'
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-ev3; then
+      ARM_FLOAT_TYPE=sflt
+      ARM_ARCH_TYPE_FLAGS='-mcpu=arm926ej-s -marm'
     elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarmv5-vfp-sflt; then
       ARM_FLOAT_TYPE=vfp-sflt
       ARM_ARCH_TYPE_FLAGS='-march=armv5t -marm'
@@ -1305,6 +1308,8 @@
   if test "x$OPENJDK_$1_OS" = xlinux; then
     if test "x$OPENJDK_$1_CPU" = xx86; then
       $2JVM_ASFLAGS="[$]$2JVM_ASFLAGS -march=i586"
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-ev3; then
+      $2JVM_ASFLAGS="-mcpu=arm926ej-s"
     fi
   elif test "x$OPENJDK_$1_OS" = xmacosx; then
     $2JVM_ASFLAGS="[$]$2JVM_ASFLAGS -x assembler-with-cpp -mno-omit-leaf-frame-pointer -mstack-alignment=16"
diff -r 22d7a88dbe78 hotspot/src/cpu/arm/vm/assembler_arm_32.hpp
--- a/hotspot/src/cpu/arm/vm/assembler_arm_32.hpp	Wed Feb 14 06:56:02 2018 -0800
+++ b/hotspot/src/cpu/arm/vm/assembler_arm_32.hpp	Wed Mar 28 03:03:38 2018 +0200
@@ -1234,10 +1234,17 @@
 
 // Imported code from glibc soft-fp bundle for
 // calculation accuracy improvement. See CR 6757269.
-extern double __aeabi_fadd_glibc(float, float);
-extern double __aeabi_fsub_glibc(float, float);
-extern double __aeabi_dadd_glibc(double, double);
-extern double __aeabi_dsub_glibc(double, double);
+
+//extern double __aeabi_fadd_glibc(float, float);
+//extern double __aeabi_fsub_glibc(float, float);
+//extern double __aeabi_dadd_glibc(double, double);
+//extern double __aeabi_dsub_glibc(double, double);
+
+// We don't need very accurate floating point math.
+#define __aeabi_fadd_glibc __aeabi_fadd
+#define __aeabi_fsub_glibc __aeabi_fsub
+#define __aeabi_dadd_glibc __aeabi_dadd
+#define __aeabi_dsub_glibc __aeabi_dsub
 };
 #endif // __SOFTFP__
 
